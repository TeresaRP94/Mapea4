M.proxy(true);

var mapajs = M.map({
  'container': 'mapjs',
  "controls": ["layerswitcher", "mouse", "scale", "overviewmap", "panzoombar", "scaleline", ],
  "getfeatureinfo": "plain"
});


var centros = new M.layer.WFS({
  name: "Centros ASSDA",
  url: "https://clientes.guadaltel.es/desarrollo/geossigc/wfs?",
  namespace: "mapea",
  name: "centrosassda",
  legend: "centrosassda",
  geometry: 'POINT',
});

var carreteras = new M.layer.WFS({
  name: "Carreteras",
  url: "https://clientes.guadaltel.es/desarrollo/geossigc/wfs?",
  namespace: "mapea",
  name: "mapb_vc1_100",
  legend: "mapb_vc1_100 - CATEGORIAS",
  getfeatureinfo: "plain",
  geometry: 'LINE',
  extract: true,
});

var municipios = new M.layer.WFS({
  name: "Municipios",
  url: "https://clientes.guadaltel.es/desarrollo/geossigc/wfs?",
  namespace: "mapea",
  name: "da_municipio_pol",
  legend: "Municipios - CATEGORÍAS",
  getfeatureinfo: "plain",
  geometry: 'POLYGON',
  extract: true,
});

mapajs.addLayers(centros);
centros.on(M.evt.LOAD, () => alert('centros cargados'));
mapajs.addLayers(carreteras);
carreteras.on(M.evt.LOAD, () => alert('carreteras cargados'));
mapajs.addLayers(municipios);
municipios.on(M.evt.LOAD, () => alert('municipios cargados'));

//
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
//
//cloroplethPOINT



let stylesPoint = [
  new M.style.Point({
    fill: {
      color: '#FF0099'
    },
    radius: 6
  }),


  new M.style.Point({
    fill: {
      color: '#00AAAA'
    },
    radius: 7
  })
];

let choroplethp = new M.style.Choropleth("nregin", stylesPoint, M.style.quantification.JENKS()); //M.style.quantification.JENKS() --> f(d, l = 6) --> f(d, 2)

// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
//
//cloropleth LINE

let stylesLine = [
    new M.style.Line({
    stroke: {
      color: 'cyan',
      width: 1
    },
    fill: {
      color: "black",
      width: 2
    }
  }),
  new M.style.Line({
    stroke: {
      color: '#337CEB',
      width: 3
    },
    fill: {
      color: "black",
      width: 2
    }
  }),
  new M.style.Line({
    stroke: {
      color: '#1f58ad',
      width: 5
    },
    fill: {
      color: "black",
      width: 2
    }
  }),
  new M.style.Line({
    stroke: {
      color: '#130668',
      width: 8
    },
    fill: {
      color: "black",
      width: 2
    }
  })
];

let choroplethl = new M.style.Choropleth("length", stylesLine, M.style.quantification.JENKS());

// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
//
// //cloro polygons
//
let stylesPolygon = [
    new M.style.Polygon({
    fill: {
      color: 'cyan'
    },
    stroke: {
      color: 'cyan',
      width: 1
    }
  }),
  new M.style.Polygon({
    fill: {
      color: '#337CEB'
    },
    stroke: {
      color: '#337CEB',
      width: 1
    }
  }),
  new M.style.Polygon({
    fill: {
      color: '#1f58ad'
    },
    stroke: {
      color: '#1f58ad',
      width: 1
    }
  }),
  new M.style.Polygon({
    fill: {
      color: '#130668'
    },
    stroke: {
      color: '#130668',
      width: 1
    }
  })
];

let choroplethpol = new M.style.Choropleth("area", stylesPolygon, M.style.quantification.JENKS());

function choropleth() {
  let tiempo_ini = calculafecha();
  centros.setStyle(choroplethp);
  carreteras.setStyle(choroplethl);
  municipios.setStyle(choroplethpol);
  let tiempo_fin = calculafecha();
  calculadif(tiempo_ini, tiempo_fin);

}

//
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// //////////////////////          Category      /////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
//
// //categoryStyle Point
//
let verdepnt = new M.style.Point({
  fill: {
    color: 'green'
  },
  stroke: {
    color: 'green',
    width: 1
  },
  radius: 6
});
let amarillopnt = new M.style.Point({
  fill: {
    color: 'yellow'
  },
  stroke: {
    color: 'yellow',
    width: 1
  },
  radius: 3
});
let rojopnt = new M.style.Point({
  fill: {
    color: 'red'
  },
  stroke: {
    color: 'red',
    width: 1
  },
  radius: 6
});
let azulpnt = new M.style.Point({
  fill: {
    color: 'blue'
  },
  stroke: {
    color: 'blue',
    width: 1
  },
  radius: 21
});
//
let azulsimplepnt = new M.style.Point({
  fill: {
    color: 'blue'
  },
  stroke: {
    color: 'blue',
    width: 1
  },
  radius: 21
});
//
let categoryStylepnt = new M.style.Category("tipologia", {
  "CENTRO DE DÍA": verdepnt,
  "CENTRO DE NOCHE": rojopnt,
  "CENTRO DE PARTICIPACIÓN ACTIVA DE PERSONAS MAYORES": rojopnt,
  "CENTRO DE SERVICIOS SOCIALES COMUNITARIOS": rojopnt,
  "CENTRO RESIDENCIAL": amarillopnt,
  "CENTRO SOCIAL": azulpnt,
  "CENTRO SOCIOCULTURAL GITANO": azulpnt,
  "COMEDOR": azulpnt,
  "CONSULTAR A LA COORDINACIÓN": azulpnt
});
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
//
// //categoryStyleLiNE
//
let naranjal = new M.style.Line({
  stroke: {
    color: 'orange',
    width: 3
  },
  fill: {
    color: "black",
    width: 2
  }
});


let amarillol = new M.style.Line({
  stroke: {
    color: 'yellow',
    width: 2
  },
  fill: {
    color: "black",
    width: 2
  }
});

let rojol = new M.style.Line({
  stroke: {
    color: 'red',
    width: 5
  },
  fill: {
    color: "black",
    width: 2
  }
});


let azull = new M.style.Line({
  stroke: {
    color: 'blue',
    width: 1
  },
  fill: {
    color: "black",
    width: 2
  }
});


let categoryStylel = new M.style.Category("jerarquia", {
  "Red básica articulante": azull,
  "Red básica estructurante": azull,
  "Red complementaria": amarillol,
  "Red complementaria metropolitana": naranjal,
  "Red de interés general del Estado": rojol,
  "Red de otros organismos": amarillol,
  "Red intercomarcal": amarillol,
  "Red provincial": naranjal
});
//
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
//
// //CATEGORYSTYLE POLYGON
//
//
let verdep = new M.style.Polygon({
  fill: {
    color: 'green',
  },
  stroke: {
    color: '"black"',
  }
});



let amarillop = new M.style.Polygon({
  fill: {
    color: 'yellow',
  },
  stroke: {
    color: '"black"',
  }
});

let rojop = new M.style.Polygon({
  fill: {
    color: 'red',
  },
  stroke: {
    color: '"black"',
  }
});


let azulp = new M.style.Polygon({
  fill: {
    color: 'blue',
  },
  stroke: {
    color: '"black"',
  }
});

let naranjap = new M.style.Polygon({
  fill: {
    color: 'orange',
  },
  stroke: {
    color: '"black"',
  }
});

let marronp = new M.style.Polygon({
  fill: {
    color: 'brown',
  },
  stroke: {
    color: '"black"',
  }
});

let magentap = new M.style.Polygon({
  fill: {
    color: '#e814d9',
  },
  stroke: {
    color: '"black"',
  }
});

let moradop = new M.style.Polygon({
  fill: {
    color: '#b213dd',
  },
  stroke: {
    color: '"black"',
  }
});



let categoryStylep = new M.style.Category("nom_provincia", {
  "ALMERIA": marronp,
  "CADIZ": amarillop,
  "CORDOBA": magentap,
  "GRANADA": verdep,
  "JAEN": naranjap,
  "MALAGA": azulp,
  "SEVILLA": rojop,
  "HUELVA": moradop
});

function categoryStyle() {

  let tiempo_ini = calculafecha();
  centros.setStyle(categoryStylepnt);
  carreteras.setStyle(categoryStylel);
  municipios.setStyle(categoryStylep);

  let tiempo_fin = calculafecha();
  calculadif(tiempo_ini, tiempo_fin);






}



// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// //////////////////////          CLUSTER      //////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////


var options = {
  ranges: [
    {
      min: 2,
      max: 3,
      style: new M.style.Point({
        stroke: {
          color: '#5789aa'
        },
        fill: {
          color: '#a3c5d8',
          opacity: 0.2
        },
        radius: 20
      })
          },
    {
      min: 3,
      max: 5,
      style: new M.style.Point({
        stroke: {
          color: '#5789aa'
        },
        fill: {
          color: '#6aa8da',
          opacity: 0.4
        },
        radius: 20
      })
          },
    {
      min: 5,
      max: 10,
      style: new M.style.Point({
        stroke: {
          color: '#5789aa'
        },
        fill: {
          color: '#468cc4',
          opacity: 0.5
        },
        radius: 20
      })
          },
    {
      min: 10,
      max: 15,
      style: new M.style.Point({
        stroke: {
          color: '#5789aa'
        },
        fill: {
          color: '#2160a6',
          opacity: 0.7
        },
        radius: 20
      })
          },
    {
      min: 15,
      max: 20,
      style: new M.style.Point({
        stroke: {
          color: '#5789aa'
        },
        fill: {
          color: '#1c5fa1',
          opacity: 0.7
        },
        radius: 20
      })
          },
    {
      min: 20,
      max: 50000,
      style: new M.style.Point({
        stroke: {
          color: '#5789aa',
          width: 10
        },
        fill: {
          color: '#1c5fa1',
          opacity: 0.9
        },
        radius: 40
      })
          }
        ],
  animated: true,
  hoverInteraction: true,
  displayAmount: true,
  selectedInteraction: true,
  distance: 80
};

var vendorParameters = {
  displayInLayerSwitcherHoverLayer: false,
  distanceSelectFeatures: 15
}

let clusterpnt = new M.style.Cluster(options, vendorParameters);

function cluster() {
  let tiempo_ini = calculafecha();
  centros.setStyle(clusterpnt);
  let tiempo_fin = calculafecha();
  calculadif(tiempo_ini, tiempo_fin);



}


// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// //////////////////////          Proportional      //////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////

let proportionalpnt = new M.style.Proportional('nregin', 4, 20, new M.style.Point({
  fill: {
    color: 'green',
    opacity: 0.5
  },
  stroke: {
    color: 'green'
  }
}));



let proportionalline = new M.style.Proportional('length', 4, 20, new M.style.Point({
  fill: {
    color: 'yellow',
    opacity: 0.5
  },
  stroke: {
    color: 'yellow'
  }
}));

let proportionalpol = new M.style.Proportional('area', 4, 20, new M.style.Point({
  fill: {
    color: 'blue',
    opacity: 0.5
  },
  stroke: {
    color: 'blue'
  }
}));


function Proportional() {
  let tiempo_ini = calculafecha();
  centros.setStyle(proportionalpnt);
  carreteras.setStyle(proportionalline);
  municipios.setStyle(proportionalpol);
  let tiempo_fin = calculafecha();
  calculadif(tiempo_ini, tiempo_fin);
}


// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// //////////////////////          Estadistica      //////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////

const defaultChartOptions = {
  type: 'PIE',
  donutRatio: 0.5,
  radius: 25,
  offsetX: 0,
  offsetY: 0,
  variables: {
    attribute: 'nregin',
    label: {
      text: function(value, values, feature) {
        return new String(value).toString();
      },
      radiusIncrement: 10,
      stroke: {
        color: '#000',
        width: 2
      },
      fill: '#FFF',
      font: 'Comic Sans MS',
      scale: 1.25
    },
    legend: 'Datos recogidos en 2016'
  },
  fill3DColor: '#CC33DD',
  scheme: M.style.chart.schemes.Pale,
  rotateWithView: true,
  animation: true,
  stroke: {
    color: "#000",
    width: 1
  }
};

let chartStyle = new M.style.Chart(defaultChartOptions);



function estadistica() {
  let tiempo_ini = calculafecha();
  centros.setStyle(chartStyle);
  let tiempo_fin = calculafecha();
  calculadif(tiempo_ini, tiempo_fin);
}

function desX() {
  let tiempo_ini = calculafecha();
  centros.setStyle(azulsimplepnt);
  carreteras.setStyle(naranjal);
  municipios.setStyle(amarillop);
  let tiempo_fin = calculafecha();
  calculadif(tiempo_ini, tiempo_fin);
}



function calculadif(tiempo_ini, tiempo_fin) {
  let milisegundos_total = 0;
  let minutos_total = 0;
  let segundos_total = 0;

  let minutos_ini = tiempo_ini.getMinutes();
  let segundos_ini = tiempo_ini.getSeconds();
  let milisegundos_ini = tiempo_ini.getMilliseconds();


  let minutos_fin = tiempo_fin.getMinutes();
  let segundos_fin = tiempo_fin.getSeconds();
  let milisegundos_fin = tiempo_fin.getMilliseconds();

  minutos_total = minutos_fin - minutos_ini;
  segundos_total = segundos_fin - segundos_ini;
  if (milisegundos_fin < milisegundos_ini) {
    milisegundos_total = milisegundos_fin;
  }
  else {
    milisegundos_total = milisegundos_fin - milisegundos_ini;
  }
  console.log("ha tardado: " + minutos_total + " minutos  " + segundos_total + " segundos  " + milisegundos_total + " milisegundos  ")
}


function calculafecha() {
  return new Date();
}
